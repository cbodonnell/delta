// Code generated by syncgen. DO NOT EDIT.
package player

type PlayerDelta struct {
	ID *int64
	Name *string
	X *float64
	Y *float64
	HP *int
	
}

func (e *Player) Clone() *Player {
	cp := *e
	return &cp
}

func (e *Player) Delta(other *Player) *PlayerDelta {
	if other == nil {
		return nil
	}
	d := &PlayerDelta{}
	
	if e.ID != other.ID {
		v := e.ID
		d.ID = &v
	}
	
	if e.Name != other.Name {
		v := e.Name
		d.Name = &v
	}
	
	if e.X != other.X {
		v := e.X
		d.X = &v
	}
	
	if e.Y != other.Y {
		v := e.Y
		d.Y = &v
	}
	
	if e.HP != other.HP {
		v := e.HP
		d.HP = &v
	}
	
	return d
}

func (d *PlayerDelta) ApplyTo(e *Player) *Player {
	cp := *e
	
	if d.ID != nil {
		cp.ID = *d.ID
	}
	
	if d.Name != nil {
		cp.Name = *d.Name
	}
	
	if d.X != nil {
		cp.X = *d.X
	}
	
	if d.Y != nil {
		cp.Y = *d.Y
	}
	
	if d.HP != nil {
		cp.HP = *d.HP
	}
	
	return &cp
}
