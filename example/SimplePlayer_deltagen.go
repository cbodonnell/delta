// Code generated by deltagen. DO NOT EDIT.
package example

import (
	"github.com/cbodonnell/delta"
)

var _ delta.Entity = (*SimplePlayer)(nil)

func (e *SimplePlayer) GetID() int64 {
	return e.ID
}

func (e *SimplePlayer) Clone() delta.Entity {
	cp := *e
	return &cp
}

func (e *SimplePlayer) Delta(o delta.Entity) delta.Delta {
	if o == nil {
		return nil
	}
	other, ok := o.(*SimplePlayer)
	if !ok {
		return nil // or panic
	}
	d := &SimplePlayerDelta{}
	if e.ID != other.ID {
		v := e.ID
		d.ID = &v
	}
	if e.Name != other.Name {
		v := e.Name
		d.Name = &v
	}
	if e.X != other.X {
		v := e.X
		d.X = &v
	}
	if e.Y != other.Y {
		v := e.Y
		d.Y = &v
	}
	if e.HP != other.HP {
		v := e.HP
		d.HP = &v
	}
	return d
}

func (e *SimplePlayer) ApplyDelta(d delta.Delta) {
	if d == nil {
		return
	}
	dt, ok := d.(*SimplePlayerDelta)
	if !ok {
		return // or panic
	}
	dt.ApplyTo(e)
}

var _ delta.Delta = (*SimplePlayerDelta)(nil)

type SimplePlayerDelta struct {
	ID *int64
	Name *string
	X *float64
	Y *float64
	HP *int
}

func (d *SimplePlayerDelta) ApplyTo(e delta.Entity) {
	et, ok := e.(*SimplePlayer)
	if !ok {
		return // or panic
	}
	if d.ID != nil {
		et.ID = *d.ID
	}
	if d.Name != nil {
		et.Name = *d.Name
	}
	if d.X != nil {
		et.X = *d.X
	}
	if d.Y != nil {
		et.Y = *d.Y
	}
	if d.HP != nil {
		et.HP = *d.HP
	}
}
